name: .NET API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: YourStrong!Passw0rd123
          ACCEPT_EULA: Y
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --name=sqlserver
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT 1' || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Adjust to your .NET version (6.0.x, 7.0.x, 8.0.x)

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Install SqlPackage
      run: |
        wget -qO- https://aka.ms/sqlpackage-linux | tar xvz -C /tmp
        sudo cp /tmp/sqlpackage /usr/local/bin/
        sudo chmod +x /usr/local/bin/sqlpackage

    - name: Wait for SQL Server to be ready
      run: |
        echo "Waiting for SQL Server to start..."
        for i in {1..60}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT 1' > /dev/null 2>&1; then
            echo "SQL Server is ready"
            break
          fi
          echo "Waiting for SQL Server... ($i/60)"
          sleep 3
        done
        
        # Verify SQL Server is actually running
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT @@VERSION'

    - name: Deploy database schema
      run: |
        # Create the database
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q "CREATE DATABASE [EventBankingCo_CustomerService_Test]"
        
        # Deploy using SqlPackage (if you have a .dacpac file)
        # sqlpackage /Action:Publish /SourceFile:path/to/your/database.dacpac /TargetConnectionString:"Server=localhost;Database=EventBankingCo_CustomerService_Test;User Id=sa;Password=YourStrong!Passw0rd123;TrustServerCertificate=true"
        
        # Alternative: Run SQL scripts directly
        find EventBankingCo.CustomerService.Database -name "*.sql" -type f | while read script; do
          echo "Executing script: $script"
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -d EventBankingCo_CustomerService_Test -i "$script"
        done

    - name: Set test environment variables
      run: |
        echo "ConnectionStrings__DefaultConnection=Server=localhost;Database=EventBankingCo_CustomerService_Test;User Id=sa;Password=YourStrong!Passw0rd123;TrustServerCertificate=true" >> $GITHUB_ENV

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload code coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-coverage
        path: TestResults/*/coverage.cobertura.xml

    # Optional: Publish code coverage to Codecov
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: TestResults/*/coverage.cobertura.xml
    #     fail_ci_if_error: true