name: Build, Deploy, and Test

on:
  push:
    branches:
      - '**'

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest  # ✅ Use Ubuntu to support Linux-based SQL Server image

    env:
      SQL_SERVER_NAME: sqlserver
      SQL_USER: sa
      SQL_PASSWORD: 3v3nTp@sSw0rD
      DACPAC_PATH: './EventBankingCo.CustomerService.Database/bin/Debug/EventBankingCo.CustomerService.Database.dacpac'
      DB_NAME: CustomerService
      SOLUTION_PATH: './EventBankingCo.CustomerService.sln'

    steps:
      - name: ⬇️ Checkout source
        uses: actions/checkout@v4

      - name: 🧰 Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 🐳 Start SQL Server
        run: |
          docker run -d --name $SQL_SERVER_NAME \
            -e "ACCEPT_EULA=Y" \
            -e "SA_PASSWORD=$SQL_PASSWORD" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: 🛠️ Install sqlcmd
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo add-apt-repository "$(curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list)"
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: 💤 Wait for SQL Server to be ready (via logs)
        run: |
          echo "Waiting for SQL Server to be ready..."
          for i in {1..30}; do
            docker logs $SQL_SERVER_NAME 2>&1 | grep -q "SQL Server is now ready for client connections"
            if [ $? -eq 0 ]; then
              echo "✅ SQL Server is ready!"
              break
            fi
            echo "⏳ Waiting ($i)..."
            sleep 5
          done

          # Final check
          docker logs $SQL_SERVER_NAME
          docker logs $SQL_SERVER_NAME 2>&1 | grep -q "SQL Server is now ready for client connections" || {
            echo "❌ SQL Server did not become ready in time."
            exit 1
          }

      - name: 🏗️ Build solution
        run: dotnet build "$SOLUTION_PATH" --configuration Debug

      - name: 📦 Deploy DACPAC using sqlpackage
        run: |
          curl -LO https://aka.ms/sqlpackage-linux
          unzip sqlpackage-linux -d sqlpackage
          chmod +x sqlpackage/sqlpackage

          ./sqlpackage/sqlpackage /Action:Publish \
            /SourceFile:$DACPAC_PATH \
            /TargetServerName:localhost \
            /TargetDatabaseName:$DB_NAME \
            /TargetUser:$SQL_USER \
            /TargetPassword:$SQL_PASSWORD \
            /p:BlockOnPossibleDataLoss=false

      - name: 🧪 Run Tests
        run: dotnet test "$SOLUTION_PATH" --configuration Debug --logger "trx"

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

      - name: 🧹 Cleanup
        if: always()
        run: docker rm -f $SQL_SERVER_NAME
