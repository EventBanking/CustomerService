name: Build, Deploy, and Test

on:
  push:
    branches:
      - '**'

jobs:
  build-deploy-test:
    runs-on: windows-latest  # Use Windows because of SQL Server tools support

    env:
      SQL_SERVER_NAME: sqlserver
      SQL_USER: sa
      SQL_PASSWORD: 3v3nTp@sSw0rD
      DACPAC_PATH: './EventBankingCo.CustomerService.Database/bin/debug/EventBankingCo.CustomerService.Database.dacpac'
      DB_NAME: CustomerService
      SOLUTION_PATH: './EventBankingCo.CustomerService.sln'

    steps:
      - name: ⬇️ Checkout source
        uses: actions/checkout@v4

      - name: 🧰 Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Or your specific version

      - name: 🐳 Start SQL Server
        run: |
          docker run -d --name ${{ env.SQL_SERVER_NAME }} `
            -e "ACCEPT_EULA=Y" `
            -e "SA_PASSWORD=${{ env.SQL_PASSWORD }}" `
            -p 1433:1433 `
            mcr.microsoft.com/mssql/server:2022-latest

      - name: 💤 Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to start..."
          for /l %%x in (1, 1, 30) do (
            sqlcmd -S localhost -U ${{ env.SQL_USER }} -P ${{ env.SQL_PASSWORD }} -Q "SELECT 1" && goto :done
            timeout /t 5 > nul
          )
          echo "SQL Server did not start in time" & exit 1
          :done

      - name: 🏗️ Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release

      - name: 📦 Deploy DACPAC
        run: |
          "C:\Program Files\Microsoft SQL Server\160\DAC\bin\SqlPackage.exe" /Action:Publish `
            /SourceFile:${{ env.DACPAC_PATH }} `
            /TargetServerName:localhost `
            /TargetDatabaseName:${{ env.DB_NAME }} `
            /TargetUser:${{ env.SQL_USER }} `
            /TargetPassword:${{ env.SQL_PASSWORD }} `
            /p:BlockOnPossibleDataLoss=false

      - name: 🧪 Run Tests
        run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --logger "trx"

      - name: 📤 Upload Test Results (Optional but helpful)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

      - name: 🧹 Cleanup
        if: always()
        run: docker rm -f ${{ env.SQL_SERVER_NAME }}
