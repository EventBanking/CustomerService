name: .NET API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: YourStrong!Passw0rd
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' 

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Install SqlPackage
      run: |
        wget -qO- https://aka.ms/sqlpackage-linux | tar xvz -C /tmp
        sudo cp /tmp/sqlpackage /usr/local/bin/
        sudo chmod +x /usr/local/bin/sqlpackage

    - name: Wait for SQL Server to be ready
      run: |
        for i in {1..30}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1' > /dev/null 2>&1; then
            echo "SQL Server is ready"
            break
          fi
          echo "Waiting for SQL Server... ($i/30)"
          sleep 2
        done

    - name: Deploy database schema
      run: |
        # Create the database
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "CREATE DATABASE [EventBankingCo_CustomerService]"
        
        /TargetConnectionString:"Server=localhost;Database=EventBankingCo_CustomerService;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true"
        
        # Alternative: Run SQL scripts directly
        find EventBankingCo.CustomerService.Database -name "*.sql" -type f | while read script; do
          echo "Executing script: $script"
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -d EventBankingCo_CustomerService -i "$script"
        done

    - name: Set test environment variables
      run: |
        echo "ConnectionStrings__DefaultConnection=Server=localhost;Database=EventBankingCo_CustomerService;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true" >> $GITHUB_ENV

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload code coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-coverage
        path: TestResults/*/coverage.cobertura.xml
