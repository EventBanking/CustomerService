name: .NET API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: YourStrong!Passw0rd123
          ACCEPT_EULA: Y
          MSSQL_PID: Express
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Adjust to your .NET version (6.0.x, 7.0.x, 8.0.x)

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (excluding database project)
      run: |
        # Build all projects except the .sqlproj
        find . -name "*.csproj" -exec dotnet build {} --no-restore --configuration Release \;
        
        # Alternative: If you have a solution file, you can exclude the project
        # dotnet sln remove EventBankingCo.CustomerService.Database/EventBankingCo.CustomerService.Database.sqlproj
        # dotnet build --no-restore --configuration Release

    - name: Install SQL Server tools
      run: |
        # Add Microsoft repository
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        
        # Update package list and install sqlcmd
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        
        # Add sqlcmd to PATH
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        export PATH="$PATH:/opt/mssql-tools/bin"

    - name: Wait for SQL Server to be ready
      run: |
        echo "Waiting for SQL Server to start..."
        sleep 30  # Give SQL Server time to initialize
        
        # Add sqlcmd to PATH for this step
        export PATH="$PATH:/opt/mssql-tools/bin"
        
        for i in {1..30}; do
          if sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT 1' > /dev/null 2>&1; then
            echo "SQL Server is ready!"
            sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT @@VERSION'
            break
          fi
          echo "Waiting for SQL Server... attempt $i/30"
          sleep 5
        done
        
        # Final check - if this fails, the job should fail
        sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q 'SELECT 1'

    - name: Deploy database schema
      working-directory: ./EventBankingCo.CustomerService.Database
      run: |
        # Add sqlcmd to PATH
        export PATH="$PATH:/opt/mssql-tools/bin"
        
        # Create the database
        sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q "CREATE DATABASE [EventBankingCo_CustomerService_Test]"
        
        # Execute SQL scripts in order
        # First, run table creation scripts
        if [ -d "EventBankingCo.CustomerService.Database" ]; then
          echo "Found database project directory"
          
          # Execute Create Scripts (Tables, Views, etc.)
          find EventBankingCo.CustomerService.Database -name "*.sql" -not -path "*/bin/*" -not -path "*/obj/*" -type f | sort | while read script; do
            echo "Executing script: $script"
            sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -d EventBankingCo_CustomerService_Test -i "$script" -b
            if [ $? -ne 0 ]; then
              echo "Failed to execute script: $script"
              exit 1
            fi
          done
        else
          echo "Database project directory not found. Skipping database deployment."
        fi
        
        # Verify database was created successfully
        sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd123' -Q "SELECT name FROM sys.databases WHERE name = 'EventBankingCo_CustomerService_Test'"

    - name: Set test environment variables
      run: |
        echo "ConnectionStrings__DefaultConnection=Server=localhost;Database=EventBankingCo_CustomerService_Test;User Id=sa;Password=YourStrong!Passw0rd123;TrustServerCertificate=true" >> $GITHUB_ENV

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload code coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-coverage
        path: TestResults/*/coverage.cobertura.xml

    # Optional: Publish code coverage to Codecov
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: TestResults/*/coverage.cobertura.xml
    #     fail_ci_if_error: true