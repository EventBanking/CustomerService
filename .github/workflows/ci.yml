name: Build, Deploy DACPAC, and Test (.NET + SQL Server)

on:
  push:
    branches:
      - "**"

jobs:
  test:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker on Windows
        run: |
          docker version

      - name: Start SQL Server container
        run: |
          docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Your!StrongP@ssw0rd123" `
            -p 1433:1433 --name sqlserver `
            -d mcr.microsoft.com/mssql/server:2022-latest

      - name: Wait for SQL Server to be ready
        shell: pwsh
        run: |
          Write-Host "Waiting for SQL Server..."
          for ($i = 0; $i -lt 30; $i++) {
            try {
              sqlcmd -S localhost -U sa -P "Your!StrongP@ssw0rd123" -Q "SELECT 1"
              break
            } catch {
              Start-Sleep -Seconds 3
              Write-Host "Waiting... ($i)"
            }
          }

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 2022

      - name: Build DACPAC
        run: |
          msbuild ./CustomerService/EventBankingCo.CustomerService.Database/EventBankingCo.CustomerService.Database.sqlproj /p:Configuration=Debug

      - name: Deploy DACPAC
        run: |
          & "C:\Program Files\Microsoft SQL Server\160\DAC\bin\SqlPackage.exe" /Action:Publish `
            /SourceFile:"CustomerService\EventBankingCo.CustomerService.Database\bin\Debug\EventBankingCo.CustomerService.Database.dacpac" `
            /TargetServerName:localhost `
            /TargetDatabaseName:CustomerService `
            /TargetUser:sa `
            /TargetPassword:"Your!StrongP@ssw0rd123"

      - name: Restore .NET dependencies
        run: dotnet restore

      - name: Build .NET
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --logger "trx"
