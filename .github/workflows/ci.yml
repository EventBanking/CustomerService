name: Build, Deploy, and Test

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: windows-latest

    env:
      SOLUTION_PATH: './EventBankingCo.CustomerService.sln'
      DACPAC_PATH: './EventBankingCo.CustomerService.Database/bin/Debug/EventBankingCo.CustomerService.Database.dacpac'

    steps:
      - name: ⬇️ Checkout source
        uses: actions/checkout@v4

      - name: 🧰 Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 🔄 Restore NuGet packages
        run: dotnet restore $env:SOLUTION_PATH

      - name: 🏗️ Build .NET projects (excluding .sqlproj)
        shell: pwsh
        run: |
          $projects = dotnet sln $env:SOLUTION_PATH list | Where-Object { $_ -like '*.csproj' }
          foreach ($proj in $projects) {
            Write-Host "🔨 Building $proj..."
            dotnet build $proj --configuration Debug --no-restore
          }

      - name: 🏗️ Build SQL Server Database Project (.sqlproj)
        shell: cmd
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" ^
            EventBankingCo.CustomerService.Database\EventBankingCo.CustomerService.Database.sqlproj ^
            /p:Configuration=Debug ^
            /p:Platform="Any CPU"

      - name: 📤 Upload DACPAC artifact
        uses: actions/upload-artifact@v4
        with:
          name: dacpac
          path: '**.*.dacpac'

  deploy-test:
    needs: build
    runs-on: ubuntu-latest

    env:
      SQL_SERVER_NAME: sqlserver
      SQL_USER: sa
      SQL_PASSWORD: 3v3nTp@sSw0rD
      DB_NAME: CustomerService
      SOLUTION_PATH: './EventBankingCo.CustomerService.sln'

    steps:
      - name: ⬇️ Checkout source
        uses: actions/checkout@v4

      - name: 📥 Download DACPAC artifact
        uses: actions/download-artifact@v4
        with:
          name: dacpac
          path: ./dacpac

      - name: 🐳 Start SQL Server container
        run: |
          docker run -d --name $SQL_SERVER_NAME \
            -e "ACCEPT_EULA=Y" \
            -e "SA_PASSWORD=$SQL_PASSWORD" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: 💤 Wait for SQL Server to be ready (via logs)
        run: |
          echo "Waiting for SQL Server to be ready..."
          for i in {1..30}; do
            docker logs $SQL_SERVER_NAME 2>&1 | grep -q "SQL Server is now ready for client connections"
            if [ $? -eq 0 ]; then
              echo "✅ SQL Server is ready!"
              break
            fi
            echo "⏳ Waiting ($i)..."
            sleep 5
          done

          docker logs $SQL_SERVER_NAME 2>&1 | grep -q "SQL Server is now ready for client connections" || {
            echo "❌ SQL Server did not become ready in time."
            exit 1
          }

      - name: 📦 Install sqlpackage
        run: |
          curl -LO https://aka.ms/sqlpackage-linux
          unzip sqlpackage-linux -d sqlpackage
          chmod +x sqlpackage/sqlpackage

      - name: 🚀 Deploy DACPAC
        run: |
          ./sqlpackage/sqlpackage /Action:Publish \
            /SourceFile:./dacpac/EventBankingCo.CustomerService.Database.dacpac \
            /TargetServerName:localhost \
            /TargetDatabaseName:$DB_NAME \
            /TargetUser:$SQL_USER \
            /TargetPassword:$SQL_PASSWORD \
            /p:BlockOnPossibleDataLoss=false

      - name: 🧪 Run Tests
        run: dotnet test "$SOLUTION_PATH" --configuration Debug --logger "trx"

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/*.trx'

      - name: 🧹 Cleanup
        if: always()
        run: docker rm -f $SQL_SERVER_NAME
